
#line 3 "tokenizer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[581] =
    {   0,
        0,    0,   76,   74,   72,   73,   70,   74,   70,   67,
       74,   74,   70,   70,   74,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       72,   67,    0,   67,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   71,   68,   69,   66,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   46,   65,   65,   65,   65,   65,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   66,   45,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       44,   65,   65,   65,   65,   65,   65,   65,   65,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   43,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   37,   27,   34,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       65,   65,   65,   65,   65,   65,   65,   47,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,   51,
       65,    1,    2,   42,   48,   49,   65,   65,   65,   65,
       65,   63,   40,   41,   60,   65,   65,   65,   65,   65,
       28,    0,    0,    0,    0,   32,    0,   31,    0,    0,
        0,    0,    0,    0,   38,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   10,   11,    0,   65,   65,
       65,   65,   65,   65,   65,    3,   65,   65,   65,   64,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,    0,   33,    0,    0,    0,    0,    0,    0,
        0,   25,    0,   55,   65,   54,   62,   59,   58,   65,
       65,   52,   65,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   65,   65,   65,   65,   65,   61,    0,
        6,    0,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    0,   65,   65,

       65,   65,   53,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,    0,    7,    0,    0,    0,    0,   65,
       65,   65,   65,    0,    0,    0,    0,    0,    0,    0,
       36,    0,    0,    0,    0,    0,    0,   65,   65,   65,
       65,    0,    0,    0,    0,    0,    0,    0,    0,   30,
        0,    0,    4,    0,   65,   65,   65,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       65,   65,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   65,   65,   65,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,   39,   65,

        0,    0,    0,    0,   21,    0,    0,    0,    0,    0,
        0,   65,   65,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   65,   65,    0,   23,    0,    0,    0,
       35,    0,    0,    0,    0,   65,   65,   18,    0,    0,
        0,    0,    0,    0,    0,   65,   65,    0,    0,    0,
        0,    0,    0,    0,   65,   65,    0,   22,    0,    0,
       24,    0,    0,   57,   56,    0,    0,   12,    0,    0,
        0,    0,    0,   16,    0,    0,   17,   13,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        4,    4,    4,    1,    5,    6,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,   10,   11,
       12,   13,   14,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   25,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[585] =
    {   0,
        0,    0, 1136, 1161, 1131, 1161, 1161, 1124, 1123,   61,
       55, 1127, 1059,  990,    0,   63,    0,   52,   56,   63,
       64,   96,  106,   96,  110,  103,  110,  106,  105,  114,
      991,  858,  822,  131,  126,  105,  117,  142,  139,  135,
      139,  141,  157,  158,  165,  169,  144,  163,  152,  148,
      160,  741, 1161, 1161, 1161,    0,    0,  165,  160,  177,
      169,  173,  175,  183,  201,  188,  203,  185,  198,  196,
      202,  207,    0,  209,  205,  220,  206,  216,  221,  208,
      219,  218,  215,  223,  219,  233,  222,  238,  230,  241,
      255,  255,  252,  248,  245,  260,  258,  252,  267,  270,

      261,  257,  260,  264,    0,    0,  276,  261,  278,  288,
      284,  278,  292,  291,  295,  291,  306,  304,  306,  304,
        0,  316,  316,  310,  320,  313,  321,  321,  316,  319,
     1161,  327,  322,  333,  335,  332,  338,  322,  339,  349,
      345,  344,  342, 1161,  347,  367,  364,  369,  371,  374,
      364,  359,  366,  381,  375,  380,  365,  383,  387,  380,
      389,  394,  385,  396,  735,  385,  395,  396,  402,  405,
      420,  417,  420,  408,  423,  424,  413,  418,    0,  422,
      421,  418,  430,  421,  434,  425,  443,  440,  433,  441,
      440,  701, 1161, 1161,  438,  442,  462,  454,  454,  463,

      474,  457,  471,  461,  465,  468,  466,  473,  484,  477,
      493,  491,  484,  482,  482,  492,  489,    0,  505,  490,
      505,  506,  506,  501,  500,  503,  523,  523,  620,  521,
      514,  520,  515,  535,  525,  526,  529,  528,  527,  540,
      545,  533,  542,  550,  551,  548,  539,  565,  553,  568,
      570,  565,  562,  564,  571,  564, 1161,  579,  571,    0,
      571,    0,    0,    0,    0,    0,  573,  573,  586,  569,
      570,    0,    0,    0,    0,  591,  590,  603,  589,  592,
     1161,  601,  598,  598,  617, 1161,  610, 1161,  603,  612,
      609,  618,  626,  631, 1161,  617,  621,  621,  638,  642,

      635,  640,  643,  650,  636, 1161, 1161,  637,  652,  645,
      656,  652,  663,  667,  662,    0,  661,  661,  666,    0,
      664,  663,  670,  667,  675,  686,  668,  674, 1161,  682,
      683,  675,  696, 1161,  701,  698,  690,  700,  699,  701,
      711, 1161,  716,  506,  719,  499,    0,    0,    0,  716,
      704,    0,  725,  717,  713,  716,  730,  485,  402, 1161,
      732,  726,  737,  745,  386,  731,  730,  742,  742,  749,
      750,  740,  748,  745,  761,  748,  746,  753,    0,  769,
     1161,  753,  755,  770,  779,  782, 1161,  783,  770,  776,
      775,  786,  780,  781,  792,  787, 1161,  231,  784,  802,

      790,  789,    0,  800,  212,  800,  799,  812,  805,  801,
      817,  806, 1161,  814, 1161,  810,  180,  813,  820,  822,
      831,  829,  832,  142,  841,  140,  842,  829,  136,  125,
     1161,  846,  839,  845,  841,  839,  842,  859,  852,  863,
      863,  864,  865,  860,  860,  863,  864,  864,  882, 1161,
      884,  871, 1161,  886,  893,  886,  896,    0,  894,  895,
      886,  884,  892,  891,  905,  898,   90,  906,  913,  915,
      899,  918,  917,  920,  921,  928,  918,  929,  913,  926,
      936,  939,  931,  939,  926,  940,  949,  952,  954,  947,
      941,  960,  963,  961,  961,  955,  957,  961,    0,  962,

      975,  960,  968,  978, 1161,  974,  975,  986,  992,  987,
      998,  994,  995,  987,  989,  996,  991,  998, 1009,  996,
     1012, 1014, 1011, 1004, 1005, 1007, 1161, 1017, 1019, 1028,
     1161, 1026, 1036, 1032, 1023, 1026, 1031, 1161, 1044, 1049,
     1047, 1043, 1040, 1041, 1054, 1055, 1056, 1047, 1051, 1051,
     1059, 1055, 1066, 1063, 1073, 1076, 1073, 1161, 1076, 1069,
     1161, 1074, 1080,    0,    0, 1080, 1083, 1161, 1087, 1086,
     1093, 1094, 1091, 1161, 1092, 1094, 1161, 1161, 1161, 1161,
     1153,   77, 1155, 1157
    } ;

static yyconst flex_int16_t yy_def[585] =
    {   0,
      580,    1,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  581,  580,  580,  582,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  581,  580,  580,  580,  584,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  584,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  583,  583,  583,  583,  583,  583,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  583,  583,

      583,  583,  583,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  583,
      583,  583,  583,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  583,  583,  583,
      583,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  583,  583,  583,  583,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  583,
      583,  583,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  583,  583,  583,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  583,  583,  583,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  583,  583,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  583,  583,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  583,  583,  580,  580,  580,
      580,  580,  580,  580,  580,  583,  583,  580,  580,  580,
      580,  580,  580,  580,  583,  583,  580,  580,  580,  580,
      580,  580,  580,  583,  583,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,    0,
      580,  580,  580,  580
    } ;

static yyconst flex_int16_t yy_nxt[1228] =
    {   0,
        4,    5,    6,    7,    7,    8,    9,   10,   11,   12,
       13,    7,   14,   15,   16,   17,   17,   18,   19,   20,
       21,   17,   22,   17,   17,   17,   23,   24,   25,   26,
       17,   17,   27,   28,   29,   17,   30,   17,   17,   17,
        4,   16,   17,   17,   18,   19,   20,   21,   17,   22,
       17,   17,   23,   24,   25,   26,   17,   17,   27,   28,
       29,   17,   30,   17,   17,   17,   33,   33,   34,   35,
       60,   36,   37,   38,   39,   40,   41,   42,   62,   56,
       61,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       58,   64,   65,   63,  481,   59,   35,   60,   36,   37,

       38,   39,   40,   41,   42,   62,   61,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   58,   64,   65,   63,
       68,   59,   66,   67,   70,   72,   76,   77,   69,  448,
       71,   74,   78,   82,   75,   79,   33,   33,   34,   83,
      447,   73,   80,   81,  444,   84,  442,   68,   66,   67,
       70,   85,   72,   76,   77,   69,   71,   74,   78,   82,
       75,   86,   79,   91,   89,   92,   83,   73,   93,   80,
       81,   84,   87,   90,   94,   95,   96,   85,  100,   88,
       97,  101,  106,   98,  435,  102,  103,  104,   86,   91,
       89,   92,  107,  108,   93,  110,  109,  112,   87,   90,

       99,   94,   95,   96,  100,   88,  111,   97,  101,  106,
       98,  102,  103,  104,  113,  114,  425,  115,  107,  116,
      108,  110,  118,  109,  112,  119,   99,  120,  122,  121,
      123,  124,  111,  125,  126,  419,  117,  127,  128,  129,
      113,  130,  114,  115,  131,  132,  116,  133,  118,  134,
      135,  119,  136,  120,  122,  121,  137,  123,  124,  125,
      138,  126,  117,  127,  139,  128,  129,  130,  140,  141,
      131,  132,  142,  133,  143,  134,  135,  144,  145,  136,
      146,  147,  137,  148,  151,  149,  157,  138,  155,  156,
      139,  152,  159,  153,  140,  150,  141,  154,  158,  142,

      160,  143,  161,  144,  145,  162,  164,  146,  147,  148,
      163,  151,  149,  157,  155,  156,  165,  152,  159,  153,
      166,  150,  167,  154,  168,  158,  169,  160,  170,  161,
      171,  172,  162,  164,  173,  175,  163,  174,  176,  177,
      178,  180,  165,  179,  181,  184,  166,  185,  167,  186,
      187,  168,  188,  169,  189,  170,  171,  190,  172,  182,
      183,  173,  175,  174,  176,  191,  177,  178,  180,  179,
      192,  181,  184,  193,  185,  194,  186,  187,  195,  188,
      189,  196,  197,  198,  190,  182,  183,  199,  200,  201,
      390,  202,  191,  203,  204,  205,  192,  206,  207,  193,

      209,  194,  208,  210,  195,  211,  385,  212,  196,  197,
      198,  213,  214,  219,  199,  200,  201,  202,  215,  203,
      204,  216,  205,  218,  206,  207,  209,  220,  221,  208,
      210,  222,  211,  212,  223,  224,  225,  227,  213,  214,
      219,  226,  229,  233,  215,  230,  231,  216,  228,  218,
      232,  234,  235,  220,  221,  236,  237,  222,  238,  239,
      245,  223,  224,  225,  227,  240,  241,  226,  242,  229,
      233,  230,  231,  243,  228,  246,  232,  234,  247,  235,
      248,  236,  249,  237,  238,  250,  239,  245,  251,  384,
      252,  240,  241,  253,  242,  254,  255,  256,  257,  243,

      258,  246,  259,  376,  260,  247,  248,  261,  249,  262,
      374,  263,  250,  264,  265,  251,  252,  266,  267,  268,
      253,  254,  255,  256,  257,  269,  258,  270,  271,  259,
      260,  272,  273,  274,  261,  275,  262,  263,  276,  264,
      265,  277,  279,  266,  267,  280,  268,  281,  282,  283,
      287,  269,  284,  285,  270,  271,  286,  272,  273,  274,
      288,  275,  289,  290,  292,  276,  291,  295,  277,  279,
      296,  280,  297,  281,  282,  293,  283,  287,  284,  285,
      299,  294,  286,  298,  300,  301,  288,  302,  305,  289,
      290,  292,  291,  303,  295,  304,  306,  296,  297,  307,

      312,  293,  308,  309,  310,  311,  299,  294,  313,  314,
      298,  300,  301,  315,  302,  305,  316,  319,  320,  303,
      317,  304,  306,  321,  278,  322,  307,  312,  308,  309,
      310,  311,  323,  324,  313,  314,  327,  318,  325,  328,
      315,  329,  316,  319,  320,  326,  330,  317,  331,  332,
      321,  322,  333,  334,  335,  336,  337,  338,  323,  339,
      324,  340,  327,  318,  325,  328,  341,  329,  342,  343,
      344,  326,  330,  345,  346,  331,  332,  347,  333,  334,
      335,  348,  336,  337,  338,  349,  339,  350,  340,  351,
      352,  353,  354,  341,  342,  343,  355,  344,  356,  345,

      357,  346,  358,  347,  359,  244,  360,  361,  348,  362,
      363,  364,  349,  350,  365,  351,  352,  353,  354,  366,
      367,  370,  355,  368,  356,  369,  357,  371,  358,  372,
      373,  359,  360,  361,  375,  362,  363,  364,  377,  217,
      378,  365,  379,   53,  380,  381,  366,  367,  370,  368,
      382,  369,  383,  371,  386,  388,  372,  373,  387,  389,
      393,  375,  391,  392,  394,  377,  378,  395,  396,  379,
      380,  381,  397,  398,  399,  400,  382,  401,  402,  383,
      403,  386,  388,  404,  387,  405,  389,  393,  391,  392,
      406,  394,  407,  408,  395,  396,  409,  410,  397,  398,

      399,  411,  400,  401,  402,  412,  403,  413,  414,  417,
      404,  405,  415,  416,  418,  420,  406,  421,  426,  407,
      408,  422,  423,  409,  410,  424,  427,  411,  428,   32,
      429,  412,  430,  413,  431,  414,  417,  432,  415,  416,
      418,  420,  433,  434,  421,  426,  436,  422,  423,  437,
      438,  424,  427,  439,  441,  428,  429,  440,  430,  443,
      445,  431,  446,  432,  449,   32,  450,  451,  433,  434,
      452,  453,  436,  454,  455,  437,  438,  456,  457,  458,
      439,  441,  459,  440,  460,  463,  443,  445,  446,  461,
      462,  449,  450,  464,  451,  465,  452,  453,  466,  454,

      467,  455,  468,  456,  469,  457,  458,  470,  471,  459,
      472,  460,  463,  473,  474,  461,  462,  475,  476,  464,
      477,  465,  478,  479,  482,  466,  480,  467,  468,  483,
      484,  469,  485,  486,  470,  471,  487,  472,  488,  489,
      473,  474,  490,  475,  476,  491,  477,  492,  478,  493,
      479,  482,  480,  494,  495,  496,  483,  484,  485,  497,
      486,  498,  500,  487,  499,  488,  489,  501,  502,  490,
      503,  491,  504,  505,  492,  493,  506,  507,  508,  494,
      509,  495,  496,  510,  511,  497,  512,  513,  498,  500,
      499,  514,   31,  515,  501,  502,  516,  503,  504,  505,

      517,   55,  518,  506,  507,  508,  519,  509,  520,  510,
      511,  521,  512,  513,  522,  523,  524,  525,  514,  515,
      526,  527,  516,  528,  529,  530,  531,  517,  518,  532,
      533,  534,  519,  535,  539,  520,  536,  537,  521,  538,
      522,  540,  523,  524,  525,  541,  526,  527,  542,  528,
      529,  530,  543,  531,  544,  532,  545,  533,  534,  546,
      535,  539,  536,  537,  547,  538,  548,  549,  540,  550,
       54,  551,  541,  552,  553,  542,  554,  555,  556,  543,
      557,  544,  545,  558,  559,  546,  560,  561,  562,  564,
      547,  563,  565,  548,  549,  566,  550,  551,  567,  552,

      553,  568,  569,  554,  555,  556,  557,  570,  571,  558,
      559,  572,  560,  561,  573,  562,  564,  563,  574,  565,
      575,  576,  566,  577,  578,  567,  579,  568,  569,   53,
       32,   32,   31,  570,  571,  580,  580,  572,  580,  580,
      573,  580,  580,  580,  574,  580,  575,  576,  580,  577,
      578,  580,  579,   52,   52,   52,   57,   57,  105,  105,
        3,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580
    } ;

static yyconst flex_int16_t yy_chk[1228] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   10,   10,   11,
       18,   11,   11,   11,   11,   11,   11,   11,   19,  582,
       18,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       16,   20,   21,   19,  467,   16,   11,   18,   11,   11,

       11,   11,   11,   11,   11,   19,   18,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   16,   20,   21,   19,
       23,   16,   22,   22,   24,   25,   27,   28,   23,  430,
       24,   26,   29,   36,   26,   30,   34,   34,   34,   37,
      429,   25,   35,   35,  426,   37,  424,   23,   22,   22,
       24,   37,   25,   27,   28,   23,   24,   26,   29,   36,
       26,   38,   30,   40,   39,   41,   37,   25,   42,   35,
       35,   37,   38,   39,   43,   43,   44,   37,   47,   38,
       45,   48,   58,   46,  417,   49,   50,   51,   38,   40,
       39,   41,   59,   60,   42,   61,   60,   63,   38,   39,

       46,   43,   43,   44,   47,   38,   62,   45,   48,   58,
       46,   49,   50,   51,   64,   65,  405,   66,   59,   67,
       60,   61,   68,   60,   63,   69,   46,   70,   71,   70,
       72,   74,   62,   75,   76,  398,   67,   77,   78,   79,
       64,   80,   65,   66,   81,   82,   67,   83,   68,   84,
       85,   69,   86,   70,   71,   70,   87,   72,   74,   75,
       88,   76,   67,   77,   89,   78,   79,   80,   90,   91,
       81,   82,   92,   83,   93,   84,   85,   94,   95,   86,
       96,   97,   87,   98,  100,   99,  104,   88,  102,  103,
       89,  101,  108,  101,   90,   99,   91,  101,  107,   92,

      109,   93,  110,   94,   95,  111,  113,   96,   97,   98,
      112,  100,   99,  104,  102,  103,  114,  101,  108,  101,
      115,   99,  116,  101,  117,  107,  118,  109,  119,  110,
      120,  122,  111,  113,  123,  125,  112,  124,  126,  127,
      128,  130,  114,  129,  132,  133,  115,  134,  116,  135,
      136,  117,  137,  118,  138,  119,  120,  139,  122,  132,
      132,  123,  125,  124,  126,  140,  127,  128,  130,  129,
      141,  132,  133,  142,  134,  143,  135,  136,  145,  137,
      138,  146,  147,  148,  139,  132,  132,  149,  149,  150,
      365,  151,  140,  152,  153,  154,  141,  155,  156,  142,

      157,  143,  156,  158,  145,  159,  359,  160,  146,  147,
      148,  161,  162,  167,  149,  149,  150,  151,  163,  152,
      153,  164,  154,  166,  155,  156,  157,  168,  169,  156,
      158,  170,  159,  160,  171,  172,  173,  175,  161,  162,
      167,  174,  176,  181,  163,  177,  178,  164,  175,  166,
      180,  182,  183,  168,  169,  184,  185,  170,  186,  187,
      195,  171,  172,  173,  175,  188,  189,  174,  190,  176,
      181,  177,  178,  191,  175,  196,  180,  182,  197,  183,
      198,  184,  199,  185,  186,  200,  187,  195,  201,  358,
      202,  188,  189,  203,  190,  204,  205,  206,  207,  191,

      208,  196,  209,  346,  210,  197,  198,  211,  199,  212,
      344,  213,  200,  214,  215,  201,  202,  216,  217,  219,
      203,  204,  205,  206,  207,  220,  208,  221,  222,  209,
      210,  223,  224,  225,  211,  226,  212,  213,  227,  214,
      215,  228,  230,  216,  217,  231,  219,  232,  233,  234,
      238,  220,  235,  236,  221,  222,  237,  223,  224,  225,
      239,  226,  240,  241,  243,  227,  242,  245,  228,  230,
      246,  231,  247,  232,  233,  244,  234,  238,  235,  236,
      249,  244,  237,  248,  250,  251,  239,  252,  255,  240,
      241,  243,  242,  253,  245,  254,  256,  246,  247,  258,

      269,  244,  259,  261,  267,  268,  249,  244,  270,  271,
      248,  250,  251,  276,  252,  255,  277,  279,  280,  253,
      278,  254,  256,  282,  229,  283,  258,  269,  259,  261,
      267,  268,  284,  285,  270,  271,  289,  278,  287,  290,
      276,  291,  277,  279,  280,  287,  292,  278,  293,  294,
      282,  283,  296,  297,  298,  299,  300,  301,  284,  302,
      285,  303,  289,  278,  287,  290,  304,  291,  305,  308,
      309,  287,  292,  310,  311,  293,  294,  312,  296,  297,
      298,  313,  299,  300,  301,  314,  302,  315,  303,  317,
      318,  319,  321,  304,  305,  308,  322,  309,  323,  310,

      324,  311,  325,  312,  326,  192,  327,  328,  313,  330,
      331,  332,  314,  315,  333,  317,  318,  319,  321,  335,
      336,  339,  322,  337,  323,  338,  324,  340,  325,  341,
      343,  326,  327,  328,  345,  330,  331,  332,  350,  165,
      351,  333,  353,   52,  354,  355,  335,  336,  339,  337,
      356,  338,  357,  340,  361,  363,  341,  343,  362,  364,
      368,  345,  366,  367,  369,  350,  351,  370,  371,  353,
      354,  355,  372,  373,  374,  375,  356,  376,  377,  357,
      378,  361,  363,  380,  362,  382,  364,  368,  366,  367,
      383,  369,  384,  385,  370,  371,  386,  388,  372,  373,

      374,  389,  375,  376,  377,  390,  378,  391,  392,  395,
      380,  382,  393,  394,  396,  399,  383,  400,  406,  384,
      385,  401,  402,  386,  388,  404,  407,  389,  408,   33,
      409,  390,  410,  391,  411,  392,  395,  412,  393,  394,
      396,  399,  414,  416,  400,  406,  418,  401,  402,  419,
      420,  404,  407,  421,  423,  408,  409,  422,  410,  425,
      427,  411,  428,  412,  432,   32,  433,  434,  414,  416,
      435,  436,  418,  437,  438,  419,  420,  439,  440,  441,
      421,  423,  442,  422,  443,  446,  425,  427,  428,  444,
      445,  432,  433,  447,  434,  448,  435,  436,  449,  437,

      451,  438,  452,  439,  454,  440,  441,  455,  456,  442,
      457,  443,  446,  459,  460,  444,  445,  461,  462,  447,
      463,  448,  464,  465,  468,  449,  466,  451,  452,  469,
      470,  454,  471,  472,  455,  456,  473,  457,  474,  475,
      459,  460,  476,  461,  462,  477,  463,  478,  464,  479,
      465,  468,  466,  480,  481,  482,  469,  470,  471,  483,
      472,  484,  486,  473,  485,  474,  475,  487,  488,  476,
      489,  477,  490,  491,  478,  479,  492,  493,  494,  480,
      495,  481,  482,  496,  497,  483,  498,  500,  484,  486,
      485,  501,   31,  502,  487,  488,  503,  489,  490,  491,

      504,   14,  506,  492,  493,  494,  507,  495,  508,  496,
      497,  509,  498,  500,  510,  511,  512,  513,  501,  502,
      514,  515,  503,  516,  517,  518,  519,  504,  506,  520,
      521,  522,  507,  523,  528,  508,  524,  525,  509,  526,
      510,  529,  511,  512,  513,  530,  514,  515,  532,  516,
      517,  518,  533,  519,  534,  520,  535,  521,  522,  536,
      523,  528,  524,  525,  537,  526,  539,  540,  529,  541,
       13,  542,  530,  543,  544,  532,  545,  546,  547,  533,
      548,  534,  535,  549,  550,  536,  551,  552,  553,  555,
      537,  554,  556,  539,  540,  557,  541,  542,  559,  543,

      544,  560,  562,  545,  546,  547,  548,  563,  566,  549,
      550,  567,  551,  552,  569,  553,  555,  554,  570,  556,
      571,  572,  557,  573,  575,  559,  576,  560,  562,   12,
        9,    8,    5,  563,  566,    3,    0,  567,    0,    0,
      569,    0,    0,    0,  570,    0,  571,  572,    0,  573,
      575,    0,  576,  581,  581,  581,  583,  583,  584,  584,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "tokenizer.ll"
/* -*-C++-*- */
/*
 * Tokenizer.
 *
 * Copyright (C) 2003 Carnegie Mellon University and Rutgers University
 *
 * Permission is hereby granted to distribute this software for
 * non-commercial research purposes, provided that this copyright
 * notice is included with any such distribution.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 * SOFTWARE IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU
 * ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 */
#line 20 "tokenizer.ll"
#include <config.h>
#include "effects.h"
#include "formulas.h"
#include "terms.h"
#include "types.h"
#include "rational.h"
#include "distributionTypes.h"
#include "goals.h"
#include <cctype>
#include <string>

using namespace ppddl_parser;

class Expression;
class Application;

#include "parser.h"

/* Current line number. */
size_t line_number;

/* Allocates a string containing the lowercase characters of the given
   C string, and returns the given token. */
static int make_string(const char* s, int token);
/* Makes a number of the given string, and return the NUMBER token. */
static int make_number(const char* s);

#line 969 "tokenizer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 53 "tokenizer.ll"


#line 1157 "tokenizer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 581 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 580 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 55 "tokenizer.ll"
return make_string(yytext, DEFINE);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "tokenizer.ll"
return make_string(yytext, DOMAIN_TOKEN);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "tokenizer.ll"
return make_string(yytext, PROBLEM);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "tokenizer.ll"
return REQUIREMENTS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "tokenizer.ll"
return TYPES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "tokenizer.ll"
return CONSTANTS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "tokenizer.ll"
return PREDICATES;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "tokenizer.ll"
return FUNCTIONS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "tokenizer.ll"
return RESOURCES;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "tokenizer.ll"
return STRIPS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "tokenizer.ll"
return TYPING;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "tokenizer.ll"
return NEGATIVE_PRECONDITIONS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "tokenizer.ll"
return DISJUNCTIVE_PRECONDITIONS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "tokenizer.ll"
return EQUALITY;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "tokenizer.ll"
return EXISTENTIAL_PRECONDITIONS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "tokenizer.ll"
return UNIVERSAL_PRECONDITIONS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "tokenizer.ll"
return QUANTIFIED_PRECONDITIONS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "tokenizer.ll"
return CONDITIONAL_EFFECTS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "tokenizer.ll"
return FLUENTS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "tokenizer.ll"
return ADL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "tokenizer.ll"
return DURATIVE_ACTIONS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "tokenizer.ll"
return DURATION_INEQUALITIES;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "tokenizer.ll"
return CONTINUOUS_EFFECTS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "tokenizer.ll"
return PROBABILISTIC_EFFECTS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "tokenizer.ll"
return REWARDS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "tokenizer.ll"
return MDP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "tokenizer.ll"
return HMDP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "tokenizer.ll"
return ACTION;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "tokenizer.ll"
return PARAMETERS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "tokenizer.ll"
return PRECONDITION;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "tokenizer.ll"
return EFFECT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "tokenizer.ll"
return PDOMAIN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "tokenizer.ll"
return OBJECTS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "tokenizer.ll"
return INIT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "tokenizer.ll"
return GOAL_LINEAR_REWARD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "tokenizer.ll"
return GOAL_REWARD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "tokenizer.ll"
return GOAL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "tokenizer.ll"
return METRIC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "tokenizer.ll"
return make_string(yytext, GOAL_PROBABILITY);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "tokenizer.ll"
return make_string(yytext, NUMBER_TOKEN);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "tokenizer.ll"
return make_string(yytext, OBJECT_TOKEN);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "tokenizer.ll"
return make_string(yytext, EITHER);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "tokenizer.ll"
return make_string(yytext, WHEN);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "tokenizer.ll"
return make_string(yytext, NOT);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "tokenizer.ll"
return make_string(yytext, AND);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "tokenizer.ll"
return make_string(yytext, OR);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "tokenizer.ll"
return make_string(yytext, IMPLY);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "tokenizer.ll"
return make_string(yytext, EXISTS);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "tokenizer.ll"
return make_string(yytext, FORALL);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "tokenizer.ll"
return make_string(yytext, PROBABILISTIC);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "tokenizer.ll"
return make_string(yytext, ASSIGN);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "tokenizer.ll"
return make_string(yytext, SCALE_UP);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "tokenizer.ll"
return make_string(yytext, SCALE_DOWN);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "tokenizer.ll"
return make_string(yytext, INCREASE);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "tokenizer.ll"
return make_string(yytext, DECREASE);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "tokenizer.ll"
return make_string(yytext, INCREASE_PROBABILISTIC);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "tokenizer.ll"
return make_string(yytext, DECREASE_PROBABILISTIC);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "tokenizer.ll"
return make_string(yytext, MINIMIZE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "tokenizer.ll"
return make_string(yytext, MAXIMIZE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "tokenizer.ll"
return make_string(yytext, DISCZ_POINTS);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "tokenizer.ll"
return make_string(yytext, DISCZ_THRESHOLD);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "tokenizer.ll"
return make_string(yytext, DISCZ_INTERVAL);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "tokenizer.ll"
return make_string(yytext, DIST_NORMAL);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "tokenizer.ll"
return make_string(yytext, DIST_UNIFORM);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "tokenizer.ll"
return make_string(yytext, NAME);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "tokenizer.ll"
return make_string(yytext, VARIABLE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "tokenizer.ll"
return make_number(yytext);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "tokenizer.ll"
return LE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "tokenizer.ll"
return GE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "tokenizer.ll"
return yytext[0];
	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 125 "tokenizer.ll"
/* comment */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "tokenizer.ll"
/* whitespace */
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 127 "tokenizer.ll"
line_number++;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "tokenizer.ll"
return ILLEGAL_TOKEN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "tokenizer.ll"
ECHO;
	YY_BREAK
#line 1615 "tokenizer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 581 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 581 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 580);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 130 "tokenizer.ll"



/* Allocates a string containing the lowercase characters of the given
   C string, and returns the given token. */
static int make_string(const char* s, int token) {
  std::string* result = new std::string();
  for (const char* p = s; *p != '\0'; p++) {
    *result += tolower(*p);
  }
  yylval.str = result;
  return token;
}


/* Makes a number of the given string, and return the NUMBER token. */
static int make_number(const char* s) {
  yylval.num = new Rational(s);
  return NUMBER;
}



